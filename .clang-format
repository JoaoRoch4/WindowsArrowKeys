---
Language:        Cpp

#The extra indent or outdent of access modifiers,
AccessModifierOffset: -4 #Integer

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=g.%20public%3A.-,AlignAfterOpenBracket,-(BracketAlignmentStyle)
AlignAfterOpenBracket: DontAlign # (BracketAlignmentStyle) Align, DontAlign, AlwaysBreak, BlockIndent

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AlignArrayOfStructures
AlignArrayOfStructures: Right # (ArrayInitializerAlignmentStyle) None, Left, Right

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=InheritParentConfig%2C%20ColumnLimit%3A%2020%7D-,AccessModifierOffset,-(Integer)
AlignConsecutiveAssignments: # (AlignConsecutiveStyle)

    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%3E%3E%3D%202%3B-,AlignConsecutiveBitFields,-(AlignConsecutiveStyle)
AlignConsecutiveBitFields: # (AlignConsecutiveStyle)

    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%3E%3E%3D%202%3B-,AlignConsecutiveDeclarations,-(AlignConsecutiveStyle)
AlignConsecutiveDeclarations: #Boolean

    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%3E%3E%3D%202%3B-,AlignConsecutiveMacros,-(AlignConsecutiveStyle)
AlignConsecutiveMacros: #(AlignConsecutiveStyle)

    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%3E%3E%3D%202%3B-,AlignConsecutiveShortCaseStatements,-(ShortCaseStatementsAlignmentStyle)
AlignConsecutiveShortCaseStatements: #(ShortCaseStatementsAlignmentStyletrue) 

    Enabled:          true #Boolean
    AcrossEmptyLines: true #Boolean
    AcrossComments:   true #Boolean
    AlignCaseArrows:  true #Boolean
    AlignCaseColons:  true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%22%22%3B%0A%7D-,AlignConsecutiveTableGenBreakingDAGArgColons,-(AlignConsecutiveStyle)
AlignConsecutiveTableGenBreakingDAGArgColons: #(AlignConsecutiveStyle) 

    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean
    
    #AlignFunctionDeclarations: true #Boolean not working

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%3E%3E%3D%202%3B-,AlignConsecutiveTableGenCondOperatorColons,-(AlignConsecutiveStyle)
AlignConsecutiveTableGenCondOperatorColons: #(AlignConsecutiveStyle) 
  
    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%3E%3E%3D%202%3B-,AlignConsecutiveTableGenDefinitionColons,-(AlignConsecutiveStyle)
AlignConsecutiveTableGenDefinitionColons: #(AlignConsecutiveStyle)
  
    Enabled:               true #Boolean
    AcrossEmptyLines:      true #Boolean
    AcrossComments:        true #Boolean
    AlignCompound:         true #Boolean
    AlignFunctionPointers: true #Boolean
    PadOperators:          true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AlignEscapedNewlines
AlignEscapedNewlines: Left # Left, LeftWithLastLine, Right, DontAlign

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=b%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%0A%20%20int%20dddddddddd%3B-,AlignOperands,-(OperandAlignmentStyle)
AlignOperands: AlignAfterOperator #  DontAlign, Align, BreakBeforeBinaryOperators, AlignAfterOperator

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%2B%20ccccccccccccccc%3B-,AlignTrailingComments,-(TrailingCommentsAlignmentStyle)
AlignTrailingComments: # Leave, Always, AlwaysBreak

    Kind: Always
    OverEmptyLines: 2 #Integer


# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowAllArgumentsOnNextLine
AllowAllArgumentsOnNextLine: true #Boolean

# This option is deprecated. See NextLine of PackConstructorInitializers.
AllowAllParametersOfDeclarationOnNextLine: false #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowAllParametersOfDeclarationOnNextLine
AllowBreakBeforeNoexceptSpecifier: Never

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowBreakBeforeNoexceptSpecifier
#not working
#AllowBreakBeforeNoexceptSpecifier: Never

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowShortBlocksOnASingleLine
AllowShortBlocksOnASingleLine: Always

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowShortBlocksOnASingleLine
AllowShortCaseExpressionOnASingleLine: true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B-,AllowShortCaseLabelsOnASingleLine,-(Boolean)
AllowShortCaseLabelsOnASingleLine: true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowShortCompoundRequirementOnASingleLine
AllowShortCompoundRequirementOnASingleLine: true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=AllowShortEnumsOnASingleLine
AllowShortEnumsOnASingleLine: true

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=%7D%20myEnum%3B-,AllowShortFunctionsOnASingleLine,-(ShortFunctionStyle)
AllowShortFunctionsOnASingleLine: All

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=bar()%3B%20%7D-,AllowShortIfStatementsOnASingleLine,-(ShortIfStyle)
AllowShortIfStatementsOnASingleLine: AllIfsAndElse #Never, Always, WithoutElse, AllIfsAndElse


AllowShortLambdasOnASingleLine: All


AllowShortLoopsOnASingleLine: true #Boolean


AlwaysBreakAfterDefinitionReturnType: None


AlwaysBreakBeforeMultilineStrings: true #Boolean


AttributeMacros:
    - __asm 
    - __capability
    - __inline 
    - __fastcall 
    - __forceinline
    - __kernel
    -  _Noreturn 
    - __noinline
    - __nonnull
    - __nothrow
    - __null_unspecified
    - __ptr32
    - __ptr64
    - __restrict
    - __stdcall
    - __thiscall
    - __vectorcall
    - __w64
    - __warn_unused_result
    - __weak
    - __weakref
    - __wur
    - __attribute__
    - __declspec

    
  

BinPackArguments: true #Boolean


BinPackParameters: true #Boolean


BitFieldColonSpacing: Both



BraceWrapping:
  AfterCaseLabel:  false
  AfterClass:      false
  AfterControlStatement: Never
  AfterEnum:       false
  AfterExternBlock: false
  AfterFunction:   false
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  BeforeCatch:     false
  BeforeElse:      false
  BeforeLambdaBody: false
  BeforeWhile:     false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true


BreakAdjacentStringLiterals: true #Boolean


BreakAfterAttributes: Leave


BreakAfterJavaFieldAnnotations: false #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=DataLoad%20loader%3B-,BreakAfterReturnType,-(ReturnTypeBreakingStyle)
BreakAfterReturnType: None


BreakArrays: false #Boolean


BreakBeforeBinaryOperators: None


BreakBeforeConceptDeclarations: Always


BreakBeforeBraces: Attach


BreakBeforeInlineASMColon: OnlyMultiline

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=BreakBeforeTernaryOperators
BreakBeforeTernaryOperators: false #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=BreakConstructorInitializers
BreakConstructorInitializers: BeforeComma #BeforeColon, BeforeComma, AfterColon

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=BreakFunctionDefinitionParameters
BreakFunctionDefinitionParameters: false #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=BreakInheritanceList
BreakInheritanceList: BeforeColon #BeforeColon, BeforeComma, AfterColon, AfterComma


BreakStringLiterals: true #Boolean


BreakTemplateDeclarations: Yes


ColumnLimit: 80 #Integer


CommentPragmas:  '^ IWYU pragma:'


CompactNamespaces: false #Boolean


ConstructorInitializerIndentWidth: 4 #Integer


ContinuationIndentWidth: 4 #Integer


Cpp11BracedListStyle: true #Boolean


DerivePointerAlignment: true #Boolean


DisableFormat: false #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=EmptyLineAfterAccessModifier
EmptyLineAfterAccessModifier: Always #Always, Never, Leave

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=protected%3A%0A%0A%7D%3B-,EmptyLineBeforeAccessModifier,-(EmptyLineBeforeAccessModifierStyle)
EmptyLineBeforeAccessModifier: Always #Never, Leave, LogicalBlock, Always


ExperimentalAutoDetectBinPacking: false #Boolean


FixNamespaceComments: true #Boolean


ForEachMacros:  #String
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH


IfMacros:      #String
  - KJ_IF_MAYBE


IncludeBlocks:   Regroup 


IncludeCategories:

  - Regex:           '^<ext/.*\.h>'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false

  - Regex:           '^<.*\.h>'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false

  - Regex:           '^<.*'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false

  - Regex:           '.*'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false



IncludeIsMainRegex: '([-_](test|unittest))?$' #String


IncludeIsMainSourceRegex: '' #String


IndentAccessModifiers: false #Boolean


IndentCaseBlocks: false #Boolean


IndentCaseLabels: true #Boolean


IndentExternBlock: AfterExternBlock


IndentGotoLabels: true #Boolean


IndentPPDirectives: None


IndentRequiresClause: true #Boolean


IndentWidth: 4 #Integer


IndentWrappedFunctionNames: false #Boolean


InsertBraces: false #Boolean


InsertNewlineAtEOF: false #Boolean


InsertTrailingCommas: None 


IntegerLiteralSeparator: #Integer
    Binary:           3
    BinaryMinDigits:  7
    Decimal:          3
    DecimalMinDigits: 5
    Hex:              2
    HexMinDigits:     6


JavaScriptQuotes: Leave


JavaScriptWrapImports: true #Boolean


KeepEmptyLines: #Boolean
  AtEndOfFile:     true
  AtStartOfBlock:  true
  AtStartOfFile:   false


LambdaBodyIndentation: Signature


LineEnding:      DeriveLF


MacroBlockBegin: '' #String


MacroBlockEnd:   '' #String


MainIncludeChar: Quote


MaxEmptyLinesToKeep: 2 #Interger


NamespaceIndentation: None


ObjCBinPackProtocolList: Never


ObjCBlockIndentWidth: 4 #Integer


ObjCBreakBeforeNestedBlockParam: true #Boolean


ObjCSpaceAfterProperty: false #Boolean


ObjCSpaceBeforeProtocolList: true #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=BAR%0A%23endif-,PackConstructorInitializers,-(PackConstructorInitializersStyle)
PackConstructorInitializers: Never #Never, BinPack, NextLine, NextLineOnly


PenaltyBreakAssignment: 2 #Integer


PenaltyBreakBeforeFirstCallParameter: 1 #Integer


PenaltyBreakComment: 300 #Integer


PenaltyBreakFirstLessLess: 120 #Integer


PenaltyBreakOpenParenthesis: 0 #Integer


PenaltyBreakScopeResolution: 500 #Integer


PenaltyBreakString: 1000 #Integer


PenaltyBreakTemplateDeclaration: 10 #Integer


PenaltyExcessCharacter: 1000000 #Integer


PenaltyIndentedWhitespace: 0 #Integer


PenaltyReturnTypeOnItsOwnLine: 200 #Integer


PointerAlignment: Left


PPIndentWidth:   -1 #Integer


QualifierAlignment: Leave


RawStringFormats: #String

  - Language: Cpp

    Delimiters:
        - c
        - C
        - cc
        - CC
        - cpp
        - Cpp
        - CPP
        - 'c++'
        - 'C++'
        - cplusplus
        - Cplusplus

    CanonicalDelimiter: c

    BasedOnStyle: google

  - Language: TextProto

    Delimiters:
        - pb
        - PB
        - proto
        - PROTO

    EnclosingFunctions:
        - EqualsProto
        - EquivToProto
        - PARSE_PARTIAL_TEXT_PROTO
        - PARSE_TEST_PROTO
        - PARSE_TEXT_PROTO
        - ParseTextOrDie
        - ParseTextProtoOrDie
        - ParseTestProto
        - ParsePartialTestProto

    CanonicalDelimiter: pb

    BasedOnStyle:    google


ReferenceAlignment: Pointer


ReflowComments:  false #Boolean


RemoveBracesLLVM: false #Boolean


RemoveParentheses: Leave


RemoveSemicolon: false #Boolean


RequiresClausePosition: OwnLine


RequiresExpressionIndentation: OuterScope


SeparateDefinitionBlocks: Leave


ShortNamespaceLines: 1 #Integer


SkipMacroDefinitionBody: false #Boolean


SortIncludes: CaseSensitive


SortJavaStaticImport: Before


SortUsingDeclarations: LexicographicNumeric


SpaceAfterCStyleCast: false #Boolean


SpaceAfterLogicalNot: false #Boolean


SpaceAfterTemplateKeyword: true #Boolean


SpaceAroundPointerQualifiers: Default


SpaceBeforeAssignmentOperators: true #Boolean


SpaceBeforeCaseColon: false #Boolean


SpaceBeforeCpp11BracedList: false #Boolean


SpaceBeforeCtorInitializerColon: true #Boolean


SpaceBeforeInheritanceColon: true #Boolean


SpaceBeforeJsonColon: false #Boolean


SpaceBeforeParens: ControlStatements


SpaceBeforeParensOptions: #Boolean

    AfterControlStatements: true
    AfterForeachMacros: true
    AfterFunctionDefinitionName: false
    AfterFunctionDeclarationName: false
    AfterIfMacros:   true
    AfterOverloadedOperator: false
    AfterPlacementOperator: true
    AfterRequiresInClause: false
    AfterRequiresInExpression: false
    BeforeNonEmptyParentheses: false


SpaceBeforeRangeBasedForLoopColon: true #Boolean


SpaceBeforeSquareBrackets: false #Boolean


SpaceInEmptyBlock: false #Boolean

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=of%20SpacesInParensOptions.-,SpacesBeforeTrailingComments,-(Unsigned)
SpacesBeforeTrailingComments: 1 #Unsigned

# https://clang.llvm.org/docs/ClangFormatStyleOptions.html#accessmodifieroffset:~:text=//%20foo%0A%7D-,SpacesInAngles,-(SpacesInAnglesStyle)
SpacesInAngles:  Never #Never, Always, Leave


SpacesInContainerLiterals: true #Boolean


SpacesInLineCommentPrefix:
    Minimum: 1
    Maximum: -1


SpacesInParens:  Never


SpacesInParensOptions: #Boolean

    ExceptDoubleParentheses: false
    InCStyleCasts: false
    InConditionalStatements: false
    InEmptyParentheses: false
    Other: false


SpacesInSquareBrackets: false #Boolean


Standard: Latest


StatementAttributeLikeMacros: #String

    - Q_EMIT
    - __assume
    - __declspec
    - __forceinline
    - __inline
    - __int64
    - __leave
    - __m128
    - __m128d
    - __m128i
    - __m64
    - __pragma
    - __ptr32
    - __ptr64
    - __restrict
    - __stdcall
    - __try
    - __uuidof
    - __w64
    - __wchar_t


StatementMacros: #String

    - Q_UNUSED
    - QT_REQUIRE_VERSION
    - __assume
    - __debugbreak
    - __noop
    - __pragma
    - __leave
    - __if_exists
    - __if_not_exists
    - __interface
    - __declspec


TableGenBreakInsideDAGArg: DontBreak


TabWidth: 4 #Integer


UseTab: Always


VerilogBreakBetweenInstancePorts: true #Boolean


WhitespaceSensitiveMacros: #String

    - BOOST_PP_STRINGIZE
    - CF_SWIFT_NAME
    - NS_SWIFT_NAME
    - PP_STRINGIZE
    - STRINGIZE
    - __if_exists
    - __if_not_exists
    - __interface
    - __declspec
    - __pragma
    

...

